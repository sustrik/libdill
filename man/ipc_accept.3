.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "IPC_ACCEPT" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
ipc_accept \- accepts an incoming IPC connection
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ ipc_accept(
\ \ \ \ int\ s,
\ \ \ \ int64_t\ deadline);
\f[]
.fi
.SH DESCRIPTION
.PP
IPC protocol is a bytestream protocol for transporting data among
processes on the same machine.
It is an equivalent to POSIX \f[B]AF_LOCAL\f[] sockets.
.PP
This function accepts an incoming IPC connection.
.PP
\f[B]s\f[]: Socket created by \f[B]ipc_listen\f[].
.PP
\f[B]deadline\f[]: A point in time when the operation should time out,
in milliseconds.
Use the \f[B]now\f[] function to get your current point in time.
0 means immediate timeout, i.e., perform the operation if possible or
return without blocking if not.
\-1 means no deadline, i.e., the call will block forever if the
operation cannot be performed.
.PP
The socket can be cleanly shut down using \f[B]ipc_close\f[] function.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns handle of the new connection.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]ECANCELED\f[]: Current coroutine was canceled.
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.IP \[bu] 2
\f[B]ETIMEDOUT\f[]: Deadline was reached.
.SH EXAMPLE
.IP
.nf
\f[C]
int\ ls\ =\ ipc_listen("/tmp/test.ipc",\ 10);
int\ s\ =\ ipc_accept(ls,\ \-1);
bsend(s,\ "ABC",\ 3,\ \-1);
char\ buf[3];
brecv(s,\ buf,\ sizeof(buf),\ \-1);
ipc_close(s);
ipc_close(ls);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]brecv\f[](3) \f[B]brecvl\f[](3) \f[B]bsend\f[](3)
\f[B]bsendl\f[](3) \f[B]hclose\f[](3) \f[B]ipc_accept_mem\f[](3)
\f[B]ipc_close\f[](3) \f[B]ipc_connect\f[](3)
\f[B]ipc_connect_mem\f[](3) \f[B]ipc_done\f[](3) \f[B]ipc_listen\f[](3)
\f[B]ipc_listen_mem\f[](3) \f[B]ipc_pair\f[](3) \f[B]ipc_pair_mem\f[](3)
\f[B]now\f[](3)
