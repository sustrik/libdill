.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "SUFFIX_ATTACH_MEM" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
suffix_attach_mem \- creates SUFFIX protocol on top of underlying socket
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ suffix_attach_mem(
\ \ \ \ int\ s,
\ \ \ \ const\ void*\ suffix,
\ \ \ \ size_t\ suffixlen,
\ \ \ \ struct\ suffix_storage*\ mem);
\f[]
.fi
.SH DESCRIPTION
.PP
SUFFIX is a message\-based protocol that delimits messages by specific
byte sequences.
For example, many protocols are line\-based, with individual messages
separated by CR+LF sequence.
.PP
This function instantiates SUFFIX protocol on top of the underlying
protocol.
.PP
This function allows to avoid one dynamic memory allocation by storing
the object in user\-supplied memory.
Unless you are hyper\-optimizing use \f[B]suffix_attach\f[] instead.
.PP
\f[B]s\f[]: Handle of the underlying socket.
It must be a bytestream protocol.
.PP
\f[B]suffix\f[]: The delimiter byte sequence.
.PP
\f[B]suffixlen\f[]: The size of the delimiter, in bytes.
.PP
\f[B]mem\f[]: The structure to store the newly created object in.
It must not be deallocated before the object is closed.
.PP
The socket can be cleanly shut down using \f[B]suffix_detach\f[]
function.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns newly created socket handle.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.IP \[bu] 2
\f[B]EPROTO\f[]: Underlying socket is not a bytestream socket.
.SH EXAMPLE
.IP
.nf
\f[C]
\ \ \ \ \ \ \ \ int\ s\ =\ tcp_connect(&addr,\ \-1);
\ \ \ \ \ \ \ \ s\ =\ suffix_attach(s,\ "
",\ 2);
\ \ \ \ \ \ \ \ msend(s,\ "ABC",\ 3,\ \-1);
\ \ \ \ \ \ \ \ char\ buf[256];
\ \ \ \ \ \ \ \ ssize_t\ sz\ =\ mrecv(s,\ buf,\ sizeof(buf),\ \-1);
\ \ \ \ \ \ \ \ s\ =\ suffix_detach(s,\ \-1);
\ \ \ \ \ \ \ \ tcp_close(s);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]hclose\f[](3) \f[B]mrecv\f[](3) \f[B]mrecvl\f[](3)
\f[B]msend\f[](3) \f[B]msendl\f[](3) \f[B]suffix_attach\f[](3)
\f[B]suffix_detach\f[](3)
