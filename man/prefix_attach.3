.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "PREFIX_ATTACH" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
prefix_attach \- creates PREFIX protocol on top of underlying socket
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ prefix_attach(
\ \ \ \ int\ s,
\ \ \ \ size_t\ hdrlen,
\ \ \ \ int\ flags);
\f[]
.fi
.SH DESCRIPTION
.PP
PREFIX is a message\-based protocol to send binary messages prefixed by
size.
The protocol has no initial handshake.
Terminal handshake is accomplished by each peer sending size field
filled by 0xff bytes.
.PP
This function instantiates PREFIX protocol on top of the underlying
protocol.
.PP
\f[B]s\f[]: Handle of the underlying socket.
It must be a bytestream protocol.
.PP
\f[B]hdrlen\f[]: Size of the length field, in bytes.
.PP
\f[B]flags\f[]: If set to \f[B]PREFIX_BIG_ENDIAN\f[] (also known as
network byte order, the default option) the most significant byte of the
size will be sent first on the wire.
If set to \f[B]PREFIX_LITTLE_ENDIAN\f[] the least signiticant byte will
come first.
.PP
The socket can be cleanly shut down using \f[B]prefix_detach\f[]
function.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns newly created socket handle.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]EINVAL\f[]: Invalid argument.
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.IP \[bu] 2
\f[B]EPROTO\f[]: Underlying socket is not a bytestream socket.
.SH EXAMPLE
.IP
.nf
\f[C]
int\ s\ =\ tcp_connect(&addr,\ \-1);
s\ =\ prefix_attach(s,\ 2,\ 0);
msend(s,\ "ABC",\ 3,\ \-1);
char\ buf[256];
ssize_t\ sz\ =\ mrecv(s,\ buf,\ sizeof(buf),\ \-1);
s\ =\ prefix_detach(s,\ \-1);
tcp_close(s);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]hclose\f[](3) \f[B]mrecv\f[](3) \f[B]mrecvl\f[](3)
\f[B]msend\f[](3) \f[B]msendl\f[](3) \f[B]prefix_attach_mem\f[](3)
\f[B]prefix_detach\f[](3)
