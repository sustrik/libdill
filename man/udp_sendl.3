.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "UDP_SENDL" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
udp_sendl \- sends an UDP packet
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ udp_sendl(
\ \ \ \ int\ s,
\ \ \ \ const\ struct\ ipaddr*\ addr,
\ \ \ \ struct\ iolist*\ first,
\ \ \ \ struct\ iolist*\ last);
\f[]
.fi
.SH DESCRIPTION
.PP
UDP is an unreliable message\-based protocol defined in RFC 768.
The size of the message is limited.
The protocol has no initial or terminal handshake.
A single socket can be used to different destinations.
.PP
This function sends an UDP packet.
.PP
Given that UDP protocol is unreliable the function has no deadline.
If packet cannot be sent it will be silently dropped.
.PP
This function accepts a linked list of I/O buffers instead of a single
buffer.
Argument \f[B]first\f[] points to the first item in the list,
\f[B]last\f[] points to the last buffer in the list.
The list represents a single, fragmented message, not a list of multiple
messages.
Structure \f[B]iolist\f[] has the following members:
.IP
.nf
\f[C]
void\ *iol_base;\ \ \ \ \ \ \ \ \ \ /*\ Pointer\ to\ the\ buffer.\ */
size_t\ iol_len;\ \ \ \ \ \ \ \ \ \ /*\ Size\ of\ the\ buffer.\ */
struct\ iolist\ *iol_next;\ /*\ Next\ buffer\ in\ the\ list.\ */
int\ iol_rsvd;\ \ \ \ \ \ \ \ \ \ \ \ /*\ Reserved.\ Must\ be\ set\ to\ zero.\ */
\f[]
.fi
.PP
When receiving, \f[B]iol_base\f[] equal to NULL means that
\f[B]iol_len\f[] bytes should be skipped.
.PP
The function returns \f[B]EINVAL\f[] error in the case the list is
malformed:
.IP \[bu] 2
If \f[B]last\->iol_next\f[] is not \f[B]NULL\f[].
.IP \[bu] 2
If \f[B]first\f[] and \f[B]last\f[] don\[aq]t belong to the same list.
.IP \[bu] 2
If there\[aq]s a loop in the list.
.IP \[bu] 2
If \f[B]iol_rsvd\f[] of any item is non\-zero.
.PP
The list (but not the buffers themselves) can be temporarily modified
while the function is in progress.
However, once the function returns the list is guaranteed to be the same
as before the call.
.PP
\f[B]s\f[]: Handle of the UDP socket.
.PP
\f[B]addr\f[]: IP address to send the packet to.
If set to \f[B]NULL\f[] remote address specified in \f[B]udp_open\f[]
function will be used.
.PP
\f[B]first\f[]: Pointer to the first item of a linked list of I/O
buffers.
.PP
\f[B]last\f[]: Pointer to the last item of a linked list of I/O buffers.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns 0.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]EINVAL\f[]: Invalid argument.
.IP \[bu] 2
\f[B]EMSGSIZE\f[]: The message is too long to fit into an UDP packet.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.SH EXAMPLE
.IP
.nf
\f[C]
struct\ ipaddr\ local;
ipaddr_local(&local,\ NULL,\ 5555,\ 0);
struct\ ipaddr\ remote;
ipaddr_remote(&remote,\ "server.example.org",\ 5555,\ 0,\ \-1);
int\ s\ =\ udp_open(&local,\ &remote);
udp_send(s1,\ NULL,\ "ABC",\ 3);
char\ buf[2000];
ssize_t\ sz\ =\ udp_recv(s,\ NULL,\ buf,\ sizeof(buf),\ \-1);
hclose(s);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]mrecv\f[](3) \f[B]mrecvl\f[](3) \f[B]msend\f[](3)
\f[B]msendl\f[](3) \f[B]udp_open\f[](3) \f[B]udp_open_mem\f[](3)
\f[B]udp_recv\f[](3) \f[B]udp_recvl\f[](3) \f[B]udp_send\f[](3)
