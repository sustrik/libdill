.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "TLS_ATTACH_SERVER" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
tls_attach_server \- creates TLS protocol on top of underlying socket
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ tls_attach_server(
\ \ \ \ int\ s,
\ \ \ \ const\ char*\ cert,
\ \ \ \ const\ char*\ cert,
\ \ \ \ int64_t\ deadline);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]WARNING: This is experimental functionality and the API may change
in the future.\f[]
.PP
TLS is a cryptographic protocol to provide secure communication over the
network.
It is a bytestream protocol.
.PP
This function instantiates TLS protocol on top of the underlying
protocol.
TLS protocol being asymmetric, client and server sides are intialized in
different ways.
This particular function initializes the server side of the connection.
.PP
\f[B]s\f[]: Handle of the underlying socket.
It must be a bytestream protocol.
.PP
\f[B]cert\f[]: Filename of the file contianing the certificate.
.PP
\f[B]cert\f[]: Filename of the file contianing the private key.
.PP
\f[B]deadline\f[]: A point in time when the operation should time out,
in milliseconds.
Use the \f[B]now\f[] function to get your current point in time.
0 means immediate timeout, i.e., perform the operation if possible or
return without blocking if not.
\-1 means no deadline, i.e., the call will block forever if the
operation cannot be performed.
.PP
The socket can be cleanly shut down using \f[B]tls_detach\f[] function.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.PP
This function is not available if libdill is compiled without
\f[B]\-\-enable\-tls\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns newly created socket handle.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]ECANCELED\f[]: Current coroutine was canceled.
.IP \[bu] 2
\f[B]ECONNRESET\f[]: Broken connection.
.IP \[bu] 2
\f[B]EINVAL\f[]: Invalid argument.
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.IP \[bu] 2
\f[B]EPROTO\f[]: Underlying socket is not a bytestream socket.
.IP \[bu] 2
\f[B]ETIMEDOUT\f[]: Deadline was reached.
.SH EXAMPLE
.IP
.nf
\f[C]
int\ s\ =\ tcp_accept(listener,\ NULL,\ \-1);
s\ =\ tls_attach_server(s,\ \-1);
bsend(s,\ "ABC",\ 3,\ \-1);
char\ buf[3];
ssize_t\ sz\ =\ brecv(s,\ buf,\ sizeof(buf),\ \-1);
s\ =\ tls_detach(s,\ \-1);
tcp_close(s);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]brecv\f[](3) \f[B]brecvl\f[](3) \f[B]bsend\f[](3)
\f[B]bsendl\f[](3) \f[B]hclose\f[](3) \f[B]now\f[](3)
\f[B]tls_attach_client\f[](3) \f[B]tls_attach_client_mem\f[](3)
\f[B]tls_attach_server_mem\f[](3) \f[B]tls_detach\f[](3)
\f[B]tls_done\f[](3)
