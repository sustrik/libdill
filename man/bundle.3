.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "BUNDLE" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
bundle \- create an empty coroutine bundle
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ bundle(void);
\f[]
.fi
.SH DESCRIPTION
.PP
Coroutines are always running in bundles.
Even a single coroutine created by \f[B]go\f[] gets its own bundle.
A bundle is a lifetime control mechanism.
When it is closed, all coroutines within the bundle are canceled.
.PP
This function creates an empty bundle.
Coroutines can be added to the bundle using the \f[B]bundle_go\f[] and
\f[B]bundle_go_mem\f[] functions.
.PP
To wait until coroutines in the bundle finish use \f[B]bundle_wait\f[]
function.
.PP
When \f[B]hclose()\f[] is called on the bundle, all the coroutines
contained in the bundle will be canceled.
In other words, all the blocking functions within the coroutine will
start failing with an \f[B]ECANCELED\f[] error.
The \f[B]hclose()\f[] function itself won\[aq]t exit until all the
coroutines in the bundle exit.
.SH RETURN VALUE
.PP
In case of success the function returns handle of the newly create
coroutine bundle.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.SH EXAMPLE
.IP
.nf
\f[C]
int\ b\ =\ bundle();
bundle_go(b,\ worker());
bundle_go(b,\ worker());
bundle_go(b,\ worker());
/*\ Give\ wrokers\ 1\ second\ to\ finish.\ */
bundle_wait(b,\ now()\ +\ 1000);
/*\ Cancel\ any\ remaining\ workers.\ */
hclose(b);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]bundle_go\f[](3) \f[B]bundle_go_mem\f[](3) \f[B]bundle_mem\f[](3)
\f[B]bundle_wait\f[](3) \f[B]go\f[](3) \f[B]go_mem\f[](3)
\f[B]hclose\f[](3) \f[B]yield\f[](3)
