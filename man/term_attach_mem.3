.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "TERM_ATTACH_MEM" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
term_attach_mem \- creates TERM protocol on top of underlying socket
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ term_attach_mem(
\ \ \ \ int\ s,
\ \ \ \ const\ void*\ buf,
\ \ \ \ size_t\ len,
\ \ \ \ struct\ term_storage*\ mem,
\ \ \ \ int64_t\ deadline);
\f[]
.fi
.SH DESCRIPTION
.PP
TERM is a protocol that implements clean terminal handshake between
peers.
When creating the protocol instance user specifies the terminal message
to use.
When closing the protocol, terminal messages are exchanged between peers
in both directions.
After the protocol shuts down the peers agree on their position in the
message stream.
.PP
This function instantiates TERM protocol on top of the underlying
protocol.
.PP
This function allows to avoid one dynamic memory allocation by storing
the object in user\-supplied memory.
Unless you are hyper\-optimizing use \f[B]term_attach\f[] instead.
.PP
\f[B]s\f[]: Handle of the underlying socket.
It must be a message protocol.
.PP
\f[B]buf\f[]: The terminal message.
.PP
\f[B]len\f[]: Size of the terminal message, in bytes.
.PP
\f[B]mem\f[]: The structure to store the newly created object in.
It must not be deallocated before the object is closed.
.PP
\f[B]deadline\f[]: A point in time when the operation should time out,
in milliseconds.
Use the \f[B]now\f[] function to get your current point in time.
0 means immediate timeout, i.e., perform the operation if possible or
return without blocking if not.
\-1 means no deadline, i.e., the call will block forever if the
operation cannot be performed.
.PP
The socket can be cleanly shut down using \f[B]term_detach\f[] function.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns newly created socket handle.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]ECANCELED\f[]: Current coroutine was canceled.
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.IP \[bu] 2
\f[B]EPROTO\f[]: Underlying socket is not a message socket.
.IP \[bu] 2
\f[B]ETIMEDOUT\f[]: Deadline was reached.
.SH EXAMPLE
.IP
.nf
\f[C]
s\ =\ term_attach(s,\ "STOP",\ 4);
\&...
/*\ Send\ terminal\ message\ to\ the\ peer.\ */
term_done(s,\ \-1);
/*\ Process\ remaining\ inbound\ messages.\ */
while(1)\ {
\ \ \ \ char\ buf[256];
\ \ \ \ ssize_t\ sz\ =\ mrecv(s,\ buf,\ sizeof(buf),\ \-1);
\ \ \ \ /*\ Check\ whether\ terminal\ message\ was\ received\ from\ the\ peer.\ */
\ \ \ \ if(sz\ <\ 0\ &&\ errno\ ==\ EPIPE)\ break;
\ \ \ \ frobnicate(buff,\ sz);
}
s\ =\ term_detach(s);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]hclose\f[](3) \f[B]mrecv\f[](3) \f[B]mrecvl\f[](3)
\f[B]msend\f[](3) \f[B]msendl\f[](3) \f[B]now\f[](3)
\f[B]term_attach\f[](3) \f[B]term_detach\f[](3) \f[B]term_done\f[](3)
