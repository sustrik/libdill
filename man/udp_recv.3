.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "UDP_RECV" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
udp_recv \- receives an UDP packet
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

ssize_t\ udp_recv(
\ \ \ \ int\ s,
\ \ \ \ struct\ ipaddr*\ addr,
\ \ \ \ void*\ buf,
\ \ \ \ size_t\ len,
\ \ \ \ int64_t\ deadline);
\f[]
.fi
.SH DESCRIPTION
.PP
UDP is an unreliable message\-based protocol defined in RFC 768.
The size of the message is limited.
The protocol has no initial or terminal handshake.
A single socket can be used to different destinations.
.PP
This function receives a single UDP packet.
.PP
\f[B]s\f[]: Handle of the UDP socket.
.PP
\f[B]addr\f[]: Out parameter.
IP address of the sender of the packet.
Can be \f[B]NULL\f[].
.PP
\f[B]buf\f[]: Buffer to receive the data to.
.PP
\f[B]len\f[]: Size of the buffer, in bytes.
.PP
\f[B]deadline\f[]: A point in time when the operation should time out,
in milliseconds.
Use the \f[B]now\f[] function to get your current point in time.
0 means immediate timeout, i.e., perform the operation if possible or
return without blocking if not.
\-1 means no deadline, i.e., the call will block forever if the
operation cannot be performed.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns size of the received message, in
bytes.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]EBUSY\f[]: The handle is currently being used by a different
coroutine.
.IP \[bu] 2
\f[B]ECANCELED\f[]: Current coroutine was canceled.
.IP \[bu] 2
\f[B]EINVAL\f[]: Invalid argument.
.IP \[bu] 2
\f[B]EMSGSIZE\f[]: The data won\[aq]t fit into the supplied buffer.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.IP \[bu] 2
\f[B]ETIMEDOUT\f[]: Deadline was reached.
.SH EXAMPLE
.IP
.nf
\f[C]
struct\ ipaddr\ local;
ipaddr_local(&local,\ NULL,\ 5555,\ 0);
struct\ ipaddr\ remote;
ipaddr_remote(&remote,\ "server.example.org",\ 5555,\ 0,\ \-1);
int\ s\ =\ udp_open(&local,\ &remote);
udp_send(s1,\ NULL,\ "ABC",\ 3);
char\ buf[2000];
ssize_t\ sz\ =\ udp_recv(s,\ NULL,\ buf,\ sizeof(buf),\ \-1);
hclose(s);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]mrecv\f[](3) \f[B]mrecvl\f[](3) \f[B]msend\f[](3)
\f[B]msendl\f[](3) \f[B]now\f[](3) \f[B]udp_open\f[](3)
\f[B]udp_open_mem\f[](3) \f[B]udp_recvl\f[](3) \f[B]udp_send\f[](3)
\f[B]udp_sendl\f[](3)
