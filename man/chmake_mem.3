.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "CHMAKE_MEM" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
chmake_mem \- creates a channel
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ chmake_mem(
\ \ \ \ struct\ chstorage*\ mem,
\ \ \ \ int\ chv[2]);
\f[]
.fi
.SH DESCRIPTION
.PP
Creates a bidirectional channel.
In case of success handles to the both sides of the channel will be
returned in \f[B]chv\f[] parameter.
.PP
A channel is a synchronization primitive, not a container.
It doesn\[aq]t store any items.
.PP
This function allows to avoid one dynamic memory allocation by storing
the object in user\-supplied memory.
Unless you are hyper\-optimizing use \f[B]chmake\f[] instead.
.PP
\f[B]mem\f[]: The structure to store the newly created object in.
It must not be deallocated before the object is closed.
.PP
\f[B]chv\f[]: Out parameter.
Two handles to the opposite ends of the channel.
.SH RETURN VALUE
.PP
In case of success the function returns 0.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.SH EXAMPLE
.IP
.nf
\f[C]
int\ ch[2];
int\ rc\ =\ chmake(ch);
if(rc\ ==\ \-1)\ {
\ \ \ \ perror("Cannot\ create\ channel");
\ \ \ \ exit(1);
}
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]chdone\f[](3) \f[B]chmake\f[](3) \f[B]choose\f[](3)
\f[B]chrecv\f[](3) \f[B]chsend\f[](3) \f[B]hclose\f[](3)
