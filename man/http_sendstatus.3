.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "HTTP_SENDSTATUS" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
http_sendstatus \- sends HTTP status to the peer
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ http_sendstatus(
\ \ \ \ int\ s,
\ \ \ \ int\ status,
\ \ \ \ const\ char*\ reason,
\ \ \ \ int64_t\ deadline);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]WARNING: This is experimental functionality and the API may change
in the future.\f[]
.PP
HTTP is an application\-level protocol described in RFC 7230.
This implementation handles only the request/response exchange.
Whatever comes after that must be handled by a different protocol.
.PP
This function sends an HTTP status line to the peer.
It is meant to be done at the beginning of the HTTP response.
For example, if status is 404 and reason is \[aq]Not found\[aq] the line
sent will look like this:
.IP
.nf
\f[C]
HTTP/1.1\ 404\ Not\ found
\f[]
.fi
.PP
\f[B]s\f[]: HTTP socket handle.
.PP
\f[B]status\f[]: HTTP status such as 200 or 404.
.PP
\f[B]reason\f[]: Reason string such as \[aq]OK\[aq] or \[aq]Not
found\[aq].
.PP
\f[B]deadline\f[]: A point in time when the operation should time out,
in milliseconds.
Use the \f[B]now\f[] function to get your current point in time.
0 means immediate timeout, i.e., perform the operation if possible or
return without blocking if not.
\-1 means no deadline, i.e., the call will block forever if the
operation cannot be performed.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns 0.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]ECANCELED\f[]: Current coroutine was canceled.
.IP \[bu] 2
\f[B]ECONNRESET\f[]: Broken connection.
.IP \[bu] 2
\f[B]EINVAL\f[]: Invalid argument.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.IP \[bu] 2
\f[B]ETIMEDOUT\f[]: Deadline was reached.
.SH EXAMPLE
.IP
.nf
\f[C]
int\ s\ =\ tcp_accept(listener,\ NULL,\ \-1);
s\ =\ http_attach(s,\ \-1);
char\ command[256];
char\ resource[256];
http_recvrequest(s,\ command,\ sizeof(command),\ resource,\ sizeof(resource),\ \-1);
while(1)\ {
\ \ \ \ char\ name[256];
\ \ \ \ char\ value[256];
\ \ \ \ int\ rc\ =\ http_recvfield(s,\ name,\ sizeof(name),\ value,\ sizeof(value),\ \-1);
\ \ \ \ if(rc\ ==\ \-1\ &&\ errno\ ==\ EPIPE)\ break;
}
http_sendstatus(s,\ 200,\ "OK",\ \-1);
s\ =\ http_detach(s,\ \-1);
tcp_close(s);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]http_attach\f[](3) \f[B]http_attach_mem\f[](3)
\f[B]http_detach\f[](3) \f[B]http_done\f[](3) \f[B]http_recvfield\f[](3)
\f[B]http_recvrequest\f[](3) \f[B]http_recvstatus\f[](3)
\f[B]http_sendfield\f[](3) \f[B]http_sendrequest\f[](3) \f[B]now\f[](3)
