.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "BUNDLE_GO" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
bundle_go \- launches a coroutine within a bundle
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ bundle_go(
\ \ \ \ int\ bndl,
\ \ \ \ expression);
\f[]
.fi
.SH DESCRIPTION
.PP
This construct launches a coroutine within the specified bundle.
For more information about bundles see \f[B]bundle\f[].
.PP
The coroutine gets a 1MB stack.
The stack is guarded by a non\-writeable memory page.
Therefore, stack overflow will result in a \f[B]SEGFAULT\f[] rather than
overwriting memory that doesn\[aq]t belong to it.
.PP
\f[B]bndl\f[]: Bundle to launch the coroutine in.
.PP
\f[B]expression\f[]: Expression to evaluate as a coroutine.
.PP
The coroutine is executed concurrently, and its lifetime may exceed the
lifetime of the caller coroutine.
The return value of the coroutine, if any, is discarded and cannot be
retrieved by the caller.
.PP
Any function to be invoked as a coroutine must be declared with the
\f[B]coroutine\f[] specifier.
.PP
Use \f[B]hclose\f[] to cancel the coroutine.
When the coroutine is canceled all the blocking calls within the
coroutine will start failing with \f[B]ECANCELED\f[] error.
.PP
\f[I]WARNING\f[]: Coroutines will most likely work even without the
coroutine specifier.
However, they may fail in random non\-deterministic ways, depending on
the code in question and the particular combination of compiler and
optimization level.
Additionally, arguments to a coroutine must not be function calls.
If they are, the program may fail non\-deterministically.
If you need to pass a result of a computation to a coroutine, do the
computation first, and then pass the result as an argument.
Instead of:
.IP
.nf
\f[C]
go(bar(foo(a)));
\f[]
.fi
.PP
Do this:
.IP
.nf
\f[C]
int\ a\ =\ foo();
go(bar(a));
\f[]
.fi
.SH RETURN VALUE
.PP
In case of success the function returns 0.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]ECANCELED\f[]: Current coroutine was canceled.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.SH EXAMPLE
.IP
.nf
\f[C]
int\ b\ =\ bundle();
bundle_go(b,\ worker());
bundle_go(b,\ worker());
bundle_go(b,\ worker());
/*\ Give\ wrokers\ 1\ second\ to\ finish.\ */
bundle_wait(b,\ now()\ +\ 1000);
/*\ Cancel\ any\ remaining\ workers.\ */
hclose(b);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]bundle\f[](3) \f[B]bundle_go_mem\f[](3) \f[B]bundle_mem\f[](3)
\f[B]bundle_wait\f[](3) \f[B]go\f[](3) \f[B]go_mem\f[](3)
\f[B]yield\f[](3)
