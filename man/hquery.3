.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "HQUERY" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
hquery \- gets an opaque pointer associated with a handle and a type
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdillimpl.h>

void*\ hquery(
\ \ \ \ int\ h);
\f[]
.fi
.SH DESCRIPTION
.PP
Returns an opaque pointer associated with the passed handle and type.
This function is a fundamental construct for building APIs on top of
handles.
.PP
The type argument is not interpreted in any way.
It is used only as an unique ID.
A unique ID can be created, for instance, like this:
.IP
.nf
\f[C]
int\ foobar_placeholder\ =\ 0;
const\ void\ *foobar_type\ =\ &foobar_placeholder;
\f[]
.fi
.PP
The return value has no specified semantics.
It is an opaque pointer.
One typical use case for it is to return a pointer to a table of
function pointers.
These function pointers can then be used to access the handle\[aq]s
functionality (see the example).
.PP
Pointers returned by \f[B]hquery\f[] are meant to be cachable.
In other words, if you call hquery on the same handle with the same type
multiple times, the result should be the same.
.PP
\f[B]h\f[]: The handle.
.SH RETURN VALUE
.PP
In case of success the function returns opaque pointer.
In case of error it returns NULL and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.SH EXAMPLE
.IP
.nf
\f[C]
struct\ quux_vfs\ {
\ \ \ \ int\ (*foo)(struct\ quux_vfs\ *vfs,\ int\ a,\ int\ b);
\ \ \ \ void\ (*bar)(struct\ quux_vfs\ *vfs,\ char\ *c);
};

int\ quux_foo(int\ h,\ int\ a,\ int\ b)\ {
\ \ \ \ struct\ foobar_vfs\ *vfs\ =\ hquery(h,\ foobar_type);
\ \ \ \ if(!vfs)\ return\ \-1;
\ \ \ \ return\ vfs\->foo(vfs,\ a,\ b);
}

void\ quux_bar(int\ h,\ char\ *c)\ {
\ \ \ \ struct\ foobar_vfs\ *vfs\ =\ hquery(h,\ foobar_type);
\ \ \ \ if(!vfs)\ return\ \-1;
\ \ \ \ vfs\->bar(vfs,\ c);
}
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]hclose\f[](3) \f[B]hmake\f[](3) \f[B]hown\f[](3)
